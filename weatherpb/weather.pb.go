// Code generated by protoc-gen-go. DO NOT EDIT.
// source: weatherpb/weather.proto

package weatherpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WeatherRequest struct {
	Location             string   `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherRequest) Reset()         { *m = WeatherRequest{} }
func (m *WeatherRequest) String() string { return proto.CompactTextString(m) }
func (*WeatherRequest) ProtoMessage()    {}
func (*WeatherRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b26dc58d367eecd, []int{0}
}

func (m *WeatherRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherRequest.Unmarshal(m, b)
}
func (m *WeatherRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherRequest.Marshal(b, m, deterministic)
}
func (m *WeatherRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherRequest.Merge(m, src)
}
func (m *WeatherRequest) XXX_Size() int {
	return xxx_messageInfo_WeatherRequest.Size(m)
}
func (m *WeatherRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherRequest proto.InternalMessageInfo

func (m *WeatherRequest) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

type WeatherResponse struct {
	Condition            string   `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	Temperature          float64  `protobuf:"fixed64,2,opt,name=temperature,proto3" json:"temperature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WeatherResponse) Reset()         { *m = WeatherResponse{} }
func (m *WeatherResponse) String() string { return proto.CompactTextString(m) }
func (*WeatherResponse) ProtoMessage()    {}
func (*WeatherResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2b26dc58d367eecd, []int{1}
}

func (m *WeatherResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WeatherResponse.Unmarshal(m, b)
}
func (m *WeatherResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WeatherResponse.Marshal(b, m, deterministic)
}
func (m *WeatherResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WeatherResponse.Merge(m, src)
}
func (m *WeatherResponse) XXX_Size() int {
	return xxx_messageInfo_WeatherResponse.Size(m)
}
func (m *WeatherResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WeatherResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WeatherResponse proto.InternalMessageInfo

func (m *WeatherResponse) GetCondition() string {
	if m != nil {
		return m.Condition
	}
	return ""
}

func (m *WeatherResponse) GetTemperature() float64 {
	if m != nil {
		return m.Temperature
	}
	return 0
}

func init() {
	proto.RegisterType((*WeatherRequest)(nil), "weather.WeatherRequest")
	proto.RegisterType((*WeatherResponse)(nil), "weather.WeatherResponse")
}

func init() { proto.RegisterFile("weatherpb/weather.proto", fileDescriptor_2b26dc58d367eecd) }

var fileDescriptor_2b26dc58d367eecd = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x4f, 0x4d, 0x2c,
	0xc9, 0x48, 0x2d, 0x2a, 0x48, 0xd2, 0x87, 0xb2, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xd8,
	0xa1, 0x5c, 0x25, 0x1d, 0x2e, 0xbe, 0x70, 0x08, 0x33, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44,
	0x48, 0x8a, 0x8b, 0x23, 0x27, 0x3f, 0x39, 0xb1, 0x24, 0x33, 0x3f, 0x4f, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x33, 0x08, 0xce, 0x57, 0x0a, 0xe4, 0xe2, 0x87, 0xab, 0x2e, 0x2e, 0xc8, 0xcf, 0x2b, 0x4e,
	0x15, 0x92, 0xe1, 0xe2, 0x4c, 0xce, 0xcf, 0x4b, 0xc9, 0x44, 0x52, 0x8f, 0x10, 0x10, 0x52, 0xe0,
	0xe2, 0x2e, 0x49, 0xcd, 0x2d, 0x48, 0x2d, 0x4a, 0x2c, 0x29, 0x2d, 0x4a, 0x95, 0x60, 0x52, 0x60,
	0xd4, 0x60, 0x0c, 0x42, 0x16, 0x32, 0x8a, 0x82, 0x3b, 0x20, 0x38, 0xb5, 0xa8, 0x2c, 0x33, 0x39,
	0x55, 0xc8, 0x83, 0x4b, 0xd0, 0x3d, 0xb5, 0xc4, 0xb9, 0xb4, 0xa8, 0x28, 0x35, 0xaf, 0x04, 0x2a,
	0x27, 0x24, 0xae, 0x07, 0xf3, 0x00, 0xaa, 0x73, 0xa5, 0x24, 0x30, 0x25, 0x20, 0x2e, 0x53, 0x62,
	0x70, 0xe2, 0x8e, 0xe2, 0x84, 0x07, 0x40, 0x12, 0x1b, 0xd8, 0xe7, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xeb, 0x7a, 0xec, 0x51, 0x14, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WeatherServiceClient is the client API for WeatherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WeatherServiceClient interface {
	GetCurrentWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error)
}

type weatherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWeatherServiceClient(cc grpc.ClientConnInterface) WeatherServiceClient {
	return &weatherServiceClient{cc}
}

func (c *weatherServiceClient) GetCurrentWeather(ctx context.Context, in *WeatherRequest, opts ...grpc.CallOption) (*WeatherResponse, error) {
	out := new(WeatherResponse)
	err := c.cc.Invoke(ctx, "/weather.WeatherService/GetCurrentWeather", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WeatherServiceServer is the server API for WeatherService service.
type WeatherServiceServer interface {
	GetCurrentWeather(context.Context, *WeatherRequest) (*WeatherResponse, error)
}

// UnimplementedWeatherServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWeatherServiceServer struct {
}

func (*UnimplementedWeatherServiceServer) GetCurrentWeather(ctx context.Context, req *WeatherRequest) (*WeatherResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentWeather not implemented")
}

func RegisterWeatherServiceServer(s *grpc.Server, srv WeatherServiceServer) {
	s.RegisterService(&_WeatherService_serviceDesc, srv)
}

func _WeatherService_GetCurrentWeather_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WeatherRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WeatherServiceServer).GetCurrentWeather(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/weather.WeatherService/GetCurrentWeather",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WeatherServiceServer).GetCurrentWeather(ctx, req.(*WeatherRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WeatherService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "weather.WeatherService",
	HandlerType: (*WeatherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentWeather",
			Handler:    _WeatherService_GetCurrentWeather_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "weatherpb/weather.proto",
}
